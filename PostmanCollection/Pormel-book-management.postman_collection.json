{
	"info": {
		"_postman_id": "b493d7e2-f0de-4f0a-8c07-21e072582692",
		"name": "Pormel-book-management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23154949",
		"_collection_link": "https://www.postman.com/universal-station-867944/workspace/pormel/collection/23154949-b493d7e2-f0de-4f0a-8c07-21e072582692?action=share&source=collection_link&creator=23154949"
	},
	"item": [
		{
			"name": "Book by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/books/94e179c9-8f73-4807-844d-9a7b2fd1801b",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"94e179c9-8f73-4807-844d-9a7b2fd1801b"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/books",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Harry Potter y el misterio de Saramago\",\n  \"isbn\": \"978-3-16-148410-0212ss3\",\n  \"year\": 1997,\n  \"pages\": 223,\n  \"publisher\": {\n    \"id\": \"d760fd3e-e3d1-42c5-a7ea-731ce7d74786\"\n  },\n  \"authors\": [\n    {\n      \"id\": \"45826772-258c-4ebd-b9d5-5037068cc510\"\n    },\n    {\n      \"id\": \"f2ac10d7-5a92-4c73-aadd-bc251798d357\"\n    }\n  ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"J K Rowling\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/author",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"author"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Create Publisher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Santillana\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/publisher",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"publisher"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Harry Potter y la Piedra Filosofal azul\",\n\n  \"publisher\": {\n    \"id\": \"4a550b98-5c85-4b39-9e73-6a95f0b4f9b3\",\n    \"name\": \"Duran Publishing\"\n  },\n  \"authors\": [\n    {\n      \"id\": \"7bfc93e1-874f-4de1-9f0e-5c489c962e4e\",\n      \"name\": \"J.J.J. Rowling\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books/6c636629-2233-415c-8b3f-6f7c5f101484",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"6c636629-2233-415c-8b3f-6f7c5f101484"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books/05e7e08f-29d9-4fd1-90ee-a28a0eaa50b1",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"05e7e08f-29d9-4fd1-90ee-a28a0eaa50b1"
					]
				}
			},
			"response": []
		}
	]
}